-- The language's syntax CFG

-------------------------------------------------------------------------------
-- BNFC for statements
-- The root rule HAS to be at the top of the file.
-- It probably should be mentioned in the scenario in moodle.

Sseq.       Stmt  ::= Stmt ";" Stmt1;
Sskip.      Stmt1 ::= "skip";
Sassgn.     Stmt1 ::= LValue "=" RValue;
Scall.      Stmt1 ::= CIdent "(" [RValue] ")";
Sprint.     Stmt1 ::= "print" "(" RValue ")";
Sresize.    Stmt1 ::= CIdent ".resize(" RValue "," RValue")";
Spush.      Stmt1 ::= CIdent ".push(" RValue ")";
Spop.       Stmt1 ::= CIdent ".pop()";
Sassert.    Stmt1 ::= "assert" "(" RValue "," StringLiteral ")";
Sreturn.    Stmt1 ::= "return" RValue;
Sretempty.  Stmt1 ::= "return";

SIfend.     SIf ::= "if" RValue SBlock;
SIfelse.    SIf ::= "if" RValue SBlock "else" SBlock;
SIfelif.    SIf ::= "if" RValue SBlock "else" SIf;
Sif.        Stmt2 ::= SIf;

Swhile.     Stmt2 ::= "while" RValue SBlock;

IntervalII. Interval ::= "[" RValue "," RValue "]";
IntervalIE. Interval ::= "[" RValue "," RValue ")";
IntervalEI. Interval ::= "(" RValue "," RValue "]";
IntervalEE. Interval ::= "(" RValue "," RValue ")";

Sfor.       Stmt2 ::= "for" CIdent "in" Interval SBlock;

Sblocks.    SBlock ::= "{" Stmt ";" "}";
Sblockd.    SBlock ::= "{" Decl ";" "}"; -- declarations can be mutating
Sblockds.   SBlock ::= "{" Decl ";" Stmt ";" "}";
Sblock.     Stmt2 ::= SBlock;


_.  Stmt  ::= Stmt1;
_.  Stmt1 ::= Stmt2;

-------------------------------------------------------------------------------
-- BNFC for declarations and typedefs
-- VDecl ::= let lvalue: T | let lvalue: T = rvalue | let lvalue = rvalue
-- FDecl ::= fn f(a1: T1, ..., an: Tn) -> T Block

Dseq.       Decl  ::= Decl ";" Decl1;

-- Variable declarations
VDNoinit.   VDecl ::= "let" LValue ":" Type;
VDType.     VDecl ::= "let" LValue ":" Type "=" RValue;
VDNotype.   VDecl ::= "let" LValue "=" RValue;
Vdecl.      Decl1 ::= VDecl;

-- Function declarations
FArg.       Arg   ::= CIdent ":" Type;
separator Arg ",";
FDType.     FDecl ::= "fn" CIdent "(" [Arg] ")" "->" Type SBlock;
Fdecl.      Decl1 ::= FDecl;

-- Type aliases
DAlias.     Decl1  ::= "using" CIdent "=" TClean;

_.  Decl ::= Decl1;

-------------------------------------------------------------------------------
-- Token positioning for error messages
position token CIdent (letter (letter | digit | '_')*);

-------------------------------------------------------------------------------
-- BNFC for boolean expressions
-- b ::= true | false | !b | b1 && b2 | b1 || b2 | b1 ^^ b2 | b1 <=> b2 |
--       e1 == e2 | e1 != e2 | e1 < e2 | e1 > e2 | e1 <= e2 | e1 >= e2

-- Levels 1-4, boolean 2-op
-- Example: the following expressions are equal.
--  x && x || x && x ^^ (x <=> !x && x || x)
--  x && x  ||  x &&  x ^^   (x <=>  !x   && x  || x)
-- (x && x) || (x && (x ^^ (((x <=> (!x)) && x) || x)))

BOr.    RValue1  ::= RValue1 "||" RValue2;
BAnd.   RValue2  ::= RValue2 "&&" RValue3;
BXor.   RValue3  ::= RValue3 "^^" RValue4;
BBeq.   RValue4  ::= RValue5 "<=>" RValue5; -- don't allow x <=> x <=> x (FTF->T)

-- Level *6*, 1-op and constants
BNot.   RValue6  ::= "!" RValue7;

-- Level *5*, rvalue 2-op
BAeq.   RValue5  ::= RValue7 "==" RValue7;
baneq.  RValue5  ::= RValue7 "!=" RValue7;
BAle.   RValue5  ::= RValue7 "<" RValue7;
bageq.  RValue5  ::= RValue7 ">=" RValue7;
BAleq.  RValue5  ::= RValue7 "<=" RValue7;
bage.   RValue5  ::= RValue7 ">" RValue7;

-- Syntactic sugar
-- We strictly define both leq and le to avoid expression cloning
-- (even though we don't have mutating expressions).
define baneq e1 e2 = BNot (BAeq e1 e2);
define bageq e1 e2 = BNot (BAle e1 e2);
define bage  e1 e2 = BNot (BAleq e1 e2);

-------------------------------------------------------------------------------
-- BNFC for arithmetic expressions
-- If possible, try to avoid letting the outermost expr be casted
-- as it introduces a conflict with rvalue casting.
-- eint ::= N | -N | x | -eint | eint1 + eint2 | eint1 - eint2 | eint1 * eint2 |
--          eint1 / eint2 | eint1 % eint2 | echar - echar
-- echar ::= L | x | echar + eint | echar - eint

AMod.       RValue7 ::= RValue7 "%" RValue8;
APlus.      RValue8 ::= RValue8 "+" RValue9;
AMinus.     RValue8 ::= RValue8 "-" RValue9;
AMul.       RValue9 ::= RValue9 "*" RValue10;
ADiv.       RValue9 ::= RValue9 "/" RValue10;
ANeg.       RValue10 ::= "-" RValue11;

-------------------------------------------------------------------------------
-- BNFC for rvalues and lvalues.

-- Example rvalue:
-- (x, (1 + 3, 'c'), <const u32>(y), lambda (a: u32) -> u32 { return a + 1; })
-- RValue ::= e | echar | be | x | <T>(RV) | (RV1, ..., RVn) | f(RV1, ..., RVn)

-- Miscellaneous
RVCast.     RValue11 ::= "<" Type ">" "(" RValue ")";
---- Unpack the underlying type of an alias ----
RVAcast.    RValue11 ::= "<" "real" CIdent ">" "(" RValue ")";
---- (Type checker makes sure the list is non-empty) ----
RVTup.      RValue11 ::= "(" RValue "," [RValue] ")";
RVArr.      RValue11 ::= "[" [RValue] "]";
RVArrEmpty. RValue11 ::= "<" Type ">[]";
RVLambda.   RValue11 ::= "lambda" "(" [Arg] ")" "->" Type SBlock;

-- Literals
RVTrue.     RValue11 ::= "true";
RVFalse.    RValue11 ::= "false";
RVNum.      RValue11 ::= Integer;
RVChar.     RValue11 ::= Char;
RVString.   RValue11 ::= StringLiteral;

-- Identifiers and references
RVId.       RValue11 ::= CIdent;
RVRcast.    RValue11 ::= "ref" CIdent;
RVRccast.   RValue11 ::= "cref" CIdent;

-- Function calls
RVCall.     RValue11 ::= CIdent "(" [RValue] ")";
RVSize.     RValue11 ::= CIdent ".size()";
RVIndex.    RValue11 ::= IndexedArr;

separator   RValue ",";
coercions RValue 11;

-- Indexed array/string of any depth
IAStart.    IndexedArr ::= CIdent "[" RValue "]";
IACont.     IndexedArr ::= IndexedArr "[" RValue "]";

-- Example lvalue: (a, (b, c), d)
-- LValue ::= x | (LV1, ..., LVn) | tab[expr]
-- Declarative lvalues (can be declared)
LVId.       LValue ::= CIdent;
---- (Type checker makes sure the list has at least 2 elements) ----
LVTup.      LValue ::= "(" LValue "," [LValue] ")";

-- Assignable (non-declarative) lvalues (cannot be declared; checked by type-checker)
ALVArr.     LValue ::= IndexedArr;

separator LValue ",";

-------------------------------------------------------------------------------
-- BNFC for types
-- Fundamental types:
-- Tint ::= i32 | i64 | u32 | u64
-- Tf ::= void | Tint | bool | char | [Tf]
--         string | (T1, ..., Tn) | Tf1 -> Tf2 | _ -> Tf
-- + modifiers
-- Note that tuples can only be composed and decomposed, never accessed or
-- modified in any other way.
-- Note that a tuple must contain at least *two* elements (otherwise we'd
-- have trouble recognising (1 + 2) as expr or tuple).

-- Some of the type families' subset relations.
-- Type > TClean > TComp > TPrim > TInt

-- Integers
Ti32.   TInt1 ::= "i32";
Ti64.   TInt1 ::= "i64";
Tu32.   TInt2 ::= "u32";
Tu64.   TInt2 ::= "u64";

_.      TInt ::= TInt1;
_.      TInt ::= TInt2;

-- Other primitives
Tvoid.  TPrim ::= "void";
Tbool.  TPrim ::= "bool";
Tchar.  TPrim ::= "char";

Tint.   TPrim ::= TInt;

-- Compound types
Tarr.   TComp ::= "[" Type "]";
Tstr.   TComp ::= "string";
Ttup.   TComp ::= "(" Type "," [Type] ")";
separator Type ",";
TFun.   TFuns ::= "(" Type "->" Type ")";

Tfun.  TComp ::= TFuns;
Tprim. TComp ::= TPrim;

-- Clean types (without const or ref)
Talias. TClean ::= CIdent;
Tcomp.  TClean ::= TComp;

-- Type modifiers (note that compounding modifiers is not possible,
-- e.g. "const ref" is not accepted)
-- Modifier cref means a constant reference to constant data (neither the
-- location nor the data pointed to can be changed through that variable).
-- Note that ref modifiers can only be obtained upon declarations (+ any rvalue
-- can be implicitly upgraded to its const version (or cref if was ref)).
Tclean. TypeNoref ::= TClean;
Tconst. TypeNoref ::= "const" TClean;
Tref.   TypeRef   ::= "ref" TClean;
Tcref.  TypeRef   ::= "cref" TClean;

TNoref. Type ::= TypeNoref;
TRef.   Type ::= TypeRef;

-------------------------------------------------------------------------------
-- Miscellaneous
-- BNFC for array
SLit.      StringLiteral ::= String;

-- Comments
comment "//";
